---
layout: post
title: "Project Euler in Haskell #2"
date: 2012-04-10 12:59
comments: true
categories: [Haskell, Project Euler]
---

## Problem Description
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be: 1,2,3,5,8,13,21,34,55,89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
<!-- more -->

## Solution
There are many ways to express the
[Fibonacci sequence in Haskell](http://www.haskell.org/haskellwiki/The_Fibonacci_sequence).

If we choose one of the most famous, which makes good use of Haskell lazy lists:

{% codeblock lang:haskell %}
fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
{% endcodeblock %}

We can simply take the Fibonacci numbers up to four million, filter the even ones
and sum the result.

{% codeblock lang:haskell %}
solution = (sum . filter even . takeWhile (<4000001)) fibs
{% endcodeblock %}

You can find the Literate Haskell code on [GitHub](https://github.com/maurotrb/mt-euler)
and on [Bitbucket](https://bitbucket.org/maurotrb/mt-euler).
